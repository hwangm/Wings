extends layout

block content
  div.row#navHeader
    div.col-md-12 W I N G S
  h3 Quickly figure out when to leave for the airport.
  button.btn.btn-primary(type="button", data-toggle="modal", data-target="#chooseFlightModal") Open modal
  form(method="get", name="form1", id="form1")
    div.row#currentStepContainer
      div.col-md-12
        div.modal.fade#chooseFlightModal(role="dialog")
          div.modal-dialog(role="document")
            div.modal-content
              div.modal-header
                b Multiple flights were found, please choose the correct flight
                button.close(type="button", data-dismiss="modal", aria-label="close")
                  span(aria-hidden="true") &times;
              div.modal-body#insertFlightChoicesHere
                div.col-md-12
                  table.table
                    thead
                      tr
                        th Route
                        th Departure Date
                        th Departure Time
                    tbody
                      tr
                        td SMF > PHX
                        td 1/13/2016 
                        td 1:30:00 PM PST
              div.modal-footer
                button.btn.btn-default(type="button", data-dismiss="modal") Close
        div.form-group.nested-group(id="step1")
          div#locationWrapper.col-md-5
            label(for="location") Where are you coming from?
            input.form-control.input-lg(type="text", name="startlocation", id="location", placeholder="1234 Sesame St, Madison, WI 53719")
          div#flightWrapper.col-md-2
            label(for="flight") Flight number
            input.form-control.input-lg(type="text", name="flight", id="flight", placeholder="DL2011")
          div#dateWrapper.col-md-3
            label(for="date") Departure date
            input.form-control.input-lg(type="date", name="departureDate", id="departureDate")
          div.inline-button.col-md-2
            button.btn.btn-primary.pull-right(type="button", id="calculateButton") Calculate
    div.row#mobileGettingToAirport
      div.col-md-12.nested-group
        label(for="transportation") How are you getting to the airport?
    div.row#extraDetails
      div.col-md-12
        span.more-options More options: I'm
        select.selectpicker.show-tick(id="modeTravel", data-width="fit", data-style="color:white;background-color:transparent;margin-left:5px;margin-right:5px;padding-top:4px")
          option.custom-select(value="DRIVING") driving
          option.custom-select(value="TRANSIT") taking public transportation
          option.custom-select(value="WALKING") walking
        span.more-options to the airport, I'm checking
        div#mobileBags.nested-group
          label(for="numberOfBags") # of bags
          label(for="tsaPrecheck") TSA-PreCheck
        select.selectpicker.show-tick(id="bags", data-width="fit", data-style="color:white;background-color:transparent;margin-left:5px;margin-right:5px")
          option.custom-select(value="0") 0
          option.custom-select(value="1") 1
          option.custom-select(value="2") 2+
        span.more-options bags and I
        select.selectpicker.show-tick(id="hasTSAPre", data-width="fit", data-style="color:white;background-color:transparent;margin-left:5px;margin-right:5px")
          option.custom-select(value="0") do not have
          option.custom-select(value="1") have
        span.more-options TSA Pre-Check.
    div.row#mobileButton
      div.col-md-12.nested-group
        button.btn.btn-primary(type="button", id="calculateButton") Calculate
    div.row
      img#loadingRow.hidden(src="/images/spinner.png", alt="loading image")
    div.row#results
      div.col-md-12#timeToAirport
  script.
    function initMap(){
      //not using var tag indicates these variables are available globally, not just in the scope of initMap
      autocomplete = new google.maps.places.Autocomplete(document.getElementById('location'));
      directionsService = new google.maps.DirectionsService;

      //initializing the flightAware FlightXML URL
      fxml_url = 'http://hwangm:60a99937aef4e1b28d9e7887511480ea66be5a0e@flightxml.flightaware.com/json/FlightXML2/';
    }

    // s is format y-m-d
    // Returns the Unix time for a given date. Specify "s" to get start date (at midnight by default), or 'e' for end date at 2359.
    function parseDate(s, startOrEnd) {
      var b = s.split('-');
      var cDate = new Date(); //get today's date to compare against start date
      if(startOrEnd == 's'){ //get Start Date. If date is today, then use current timestamp. Otherwise, default to midnight.
        var d = new Date(b[0], --b[1], b[2], 0, 0, 0);
        if(cDate.toDateString() == d.toDateString()){
          return Math.floor(cDate.valueOf()/1000);
        }
        else{
          return d.valueOf()/1000;
        }
      }
      else{                  //get End Date at 23:59:59 hours
        var d = new Date(b[0], --b[1], b[2], 23, 59, 59);
        return d.valueOf()/1000;
      }
    }

    //input example is 'DL2011'
    //Returns either the letters alone or numbers alone depending on w parameter
    function parseFlight(s, w) {
      if(w == 1){
        return s.split(/[a-zA-Z]+/g)[1];
      }
      else {
        return s.split(/[0-9]+/g)[0];
      }
    }

    //given an epoch time, this function returns the local time in a human readable format 
    function epochToLocalTime(t){
      var d = new Date(t*1000);
      var options = { timeZoneName: "short" }
      return d.toLocaleString('en-US', options);
    }

    $(document).ready(function() {
      var fullDate = new Date();
      var currentDate = fullDate.getFullYear() + '-' + ("0" + (fullDate.getMonth()+1)).slice(-2) + '-' + ("0" + fullDate.getDate()).slice(-2);
      $('#departureDate').prop('value',currentDate);
      $('#flight').autocomplete({
        source: ["DL2011","DL3000","WN105","AK500"]
      });
      $('#calculateButton').click(function() {
        $('#loadingRow').removeClass('hidden');
        $('#loadingRow').show(200);


        var sDate = parseDate($('#departureDate').val(), 's');
        var eDate = parseDate($('#departureDate').val(), 'e');
        console.log(sDate + ' ' + eDate);
        var address = $('#location').val();
        var flight = $('#flight').val();
        if(flight == ""){
          flight = "UAL1892";
        }
        var airlineCode = parseFlight(flight, 0);

        switch(airlineCode.toUpperCase()){ //converting common US IATA codes to ICAO 
          case "WN":
            airlineCode = "SWA";
            break;
          case "DL":
            airlineCode = "DAL";
            break;
          case "AA":
            airlineCode = "AAL";
            break;
          case "UA":
            airlineCode = "UAL";
            break;
          default:
            airlineCode = airlineCode.toUpperCase();
        }
        var flightNum = parseFlight(flight, 1);
        console.log(airlineCode +' '+flightNum);
        var modeTravel = $('#modeTravel').val();
        var bags = $('#bags').val();
        var TSAPre = $('#hasTSAPre').val();
        var airport = "SFO";
        if(address == ""){
          address = "3145 Manchester Court, Palo Alto, CA"
        }
        console.log(address + " " + flight + " " + modeTravel + " " + bags + " " + TSAPre);

        // Comment out this section to avoid using the flightstats API, which costs $$$
        $.ajax({
          type: 'GET',
          url: fxml_url + 'AirlineFlightSchedules',
          data: {'startDate':sDate, 'endDate':eDate, 'airline':airlineCode, 'flightno':flightNum, 'howMany':5, 'offset':0},
          success: function(result) {
            console.log(result);
            //information stored in the result
            //departure time (in UTC epoch time/seconds) - need to convert to local timestamp
            //origin airport code
            if(result.AirlineFlightSchedulesResult.data.length == 0){
              $('#loadingRow').hide(200, function(){
                  $('#timeToAirport').css('color','white').text('No flights found with the flight number and date. Please try again.');
                });
            }
            else{
              //Get data for a popup to ask user which flight is correct
              //For each flight:
              //- departure time (in local time based on user location)
              //- departure airport (and maybe arrival airport)
              var numResults = result.AirlineFlightSchedulesResult.data.length;
              var departureTimeArray =  []; //init new departure time array
              var departureAirportArray = [];
              var actualIdentifierArray = [];
              var identifierArray = [];

              for(var i=0;i<result.AirlineFlightSchedulesResult.data.length;i++){
                var element = result.AirlineFlightSchedulesResult.data[i];
                departureTimeArray.push(epochToLocalTime(element.departuretime));
                departureAirportArray.push(element.origin);
                identifierArray.push(element.ident); //actual_ident is only populated if ident is different (for codeshares)
                actualIdentifierArray.push(element.actual_ident);
              }
              console.log(departureTimeArray);
              console.log(departureAirportArray);
              console.log(identifierArray);
              console.log(actualIdentifierArray);

              var utcTime = result.AirlineFlightSchedulesResult.data[0].departuretime;
              d = new Date(0);
              d.setUTCSeconds(utcTime);
              originAirport = result.AirlineFlightSchedulesResult.data[0].origin;

              directionsService.route({
                origin: address,
                destination: originAirport,
                travelMode: modeTravel
              }, function(response, status) {
                if(status == "OK"){
                  console.log('success, time incoming: ');
                  //console.log(response);
                  var time = response.routes[0].legs[0].duration.text;
                  console.log(time);
                  $('#loadingRow').hide(200, function(){
                    $('#timeToAirport').css('color','white').text('It will take approximately '+time+' to get to '+originAirport+' airport from '+address+'.');
                  });
                }
                else {
                  console.log('failure, response: ');
                  console.log(response);
                  $('#loadingRow').hide(200, function(){
                    $('#timeToAirport').css('color','white').text('There was a problem getting directions to the origin airport. Please try again.');
                  });
                }
              });
            }
          },
            error: function(data, text){
              $('#loadingRow').hide(200, function(){
                  $('#timeToAirport').css('color','white').text('There was a problem getting the flight information. Please try again.');
              });
            },
            dataType: 'jsonp',
            jsonp: 'jsonp_callback',
            xhrFields: {withCredentials: true}
        });
        //End of section to comment out

        //- $('#loadingRow').hide(200, function(){
        //-   $('#timeToAirport').css('color','white').text('It will take approximately 24 minutes to get to SFO airport from 3145 Manchester Court, Palo Alto CA');
        //- });

      });
    });
  script(async, defer, src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEMWXQEwFkceEBkA4gkl9jjeWCpEk-BeI&libraries=places&callback=initMap")
